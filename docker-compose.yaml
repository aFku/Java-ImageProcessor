name: "image-processing-app"
services:

  postgresql_db:
    image: postgres:alpine3.19
    restart: always
    container_name: app-postgres
    volumes:
      - db-data:/var/lib/postgresql
    network_mode: host # Port: 5432
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${DB_NAME}"]
      interval: 30s
      timeout: 60s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5 # 23.0.X and 24.0.X has problem with hibernate connection to database
    container_name: app-keycloak
    restart: always
    command: "start-dev --db=postgres --db-url=jdbc:postgresql://localhost:5432/${DB_NAME} --db-username=${DB_USER} --db-password=${DB_PASSWORD} --import-realm --health-enabled=true"
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    network_mode: host # ports: 8443, 8080
    volumes:
      - ./AppComponents/Keycloak/ImageProcessor-realm.json:/opt/keycloak/data/import/realm.json
    depends_on:
      postgresql_db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", 'exec 3<>/dev/tcp/localhost/8080; echo -e "GET /health/ready HTTP/1.1\nhost: localhost:8080\n" >&3; timeout --preserve-status 1 cat <&3 | grep -m 1 status | grep -m 1 UP; ERROR=$?; exec 3<&-; exec 3>&-; exit $$ERROR' ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.9.20-management
    container_name: app-rabbitmq
    restart: always
    network_mode: host # ports: 15672, 5672
    environment:
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
    volumes:
      - ./AppComponents/RabbitMQ/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./AppComponents/RabbitMQ/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    depends_on:
      keycloak:
        condition: service_healthy

  adjusterapp:
    image: adjuster_app:latest
    container_name: adjuster_app
    restart: always
    build:
      context: AppComponents/ImageAdjusterApp
      dockerfile: Dockerfile
    volumes:
      - processed-images:/mnt/proc
      - raw-images:/mnt/raw
    environment:
      - KEYCLOAK_SERVICE=localhost
      - APP_PORT=80
      - RAW_STORAGE=/mnt/raw
      - PROCESSED_STORAGE=/mnt/proc
      - RABBITMQ_SERVICE=localhost
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_SERVICE=localhost
      - LOG_LEVEL=DEBUG
    network_mode: host # port 80
    depends_on:
      postgresql_db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: "curl --fail localhost/api-docs | grep /api/v1/images || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5

  angular-front:
    image: adjuster_front:latest
    container_name: adjuster_front
    restart: always
    build:
      context: AppComponents/UI/image-processor-frontend
      dockerfile: Dockerfile
    network_mode: host # port 4200
    depends_on:
      adjusterapp:
        condition: service_healthy
    healthcheck:
      test: "curl --fail localhost:4200"
      interval: 10s
      timeout: 10s
      retries: 5

  processing-service:
    image: processing_service:latest
    container_name: processing_service
    restart: always
    build:
      context: AppComponents/ProcessingService
      dockerfile: Dockerfile
    volumes:
      - processed-images:/mnt/proc
      - raw-images:/mnt/raw
    environment:
      - APP_PORT=81
      - RAW_STORAGE=/mnt/raw
      - PROCESSED_STORAGE=/mnt/proc
      - RABBITMQ_SERVICE=localhost
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - LOG_LEVEL=DEBUG
    network_mode: host # port 81
    depends_on:
      adjusterapp:
        condition: service_healthy

volumes:
  db-data:
  processed-images:
  raw-images: